require("should");
var Communicator = require("../../protal.js").Communicator;
var StartServer = require("./mockserver").StartServer;
var TRom = require("./mockserver/NodeTafProxy").TRom;

describe("test-rpc-call", function () {
    this.timeout(5000);
    var server1, server2, communicator;
    before(function(done) {
        server1 = StartServer({
            servant: "TRom.NodeTafServer.NodeTafObj",
            endpoint: "tcp -h 127.0.0.1 -p 14002 -t 10000"
        });
        server2 = StartServer({
            servant: "TRom.NodeTafServer.NodeTafObj",
            endpoint: "tcp -h 127.0.0.1 -p 14003 -t 10000"
        });
        setTimeout(function(){
            done()
        }, 1000)
    })

    after(function() {
        server1.stop();
        server2.stop();
    })

    beforeEach(function() {
        communicator = Communicator.New();
    })

    afterEach(function() {
        communicator.destroy();
    })

    it("1. basic rpc call", function (done) {
        var prx = communicator.stringToProxy(TRom.NodeTafProxy, "TRom.NodeTafServer.NodeTafObj@tcp -h 127.0.0.1 -p 14002");
        prx.testRpcCall("test").then(function () {
            done();
        }).catch(function (err) {
            done(err.response.error)
        })
    })

    it("2. one way rpc call", function () {
        var prx = communicator.stringToProxy(TRom.NodeTafProxy, "TRom.NodeTafServer.NodeTafObj@tcp -h 127.0.0.1 -p 14002");
        prx.testRpcCall("test",{packetType:1}).should.be.rejected();
    })

    it("3. rpc call context", function (done) {
        var prx = communicator.stringToProxy(TRom.NodeTafProxy, "TRom.NodeTafServer.NodeTafObj@tcp -h 127.0.0.1 -p 14002");
        prx.testContext({context:{test: "test"}}).then(function (data) {
            data.response.return.should.equal(0)
            done()
        }).catch(function (err) {
            done(err.response? err.response.error : err);
        })
    })

    it("4. wup rpc call", function (done) {
        var prx = communicator.stringToProxy(TRom.NodeTafProxy, "TRom.NodeTafServer.NodeTafObj@tcp -h 127.0.0.1 -p 14002");
        prx.setVersion(2);
        prx.testRpcCall("test").then(function () {
            done()
        }).catch(function (err) {
            done(err.response.error)
        })
    })

    it("5. hash code", function (done) {
        var prx = communicator.stringToProxy(TRom.NodeTafProxy, "TRom.NodeTafServer.NodeTafObj@tcp -h 127.0.0.1 -p 14002:tcp -h 127.0.0.1 -p 14003 -t 10000");
        Promise.all([
            prx.testRpcCall("test", {hashCode:1}),
            prx.testRpcCall("test", {hashCode:1})
        ]).then(function (data) {
            var ret0 = data[0].response.return;
            var ret1 = data[1].response.return;
            ret0.should.equal(ret1);
            done();
        }).catch(function (err) {
            done(err.response? err.response.error : err);
        })
    })

    it("6. consistentHash hash", function (done) {
        var prx = communicator.stringToProxy(TRom.NodeTafProxy, "TRom.NodeTafServer.NodeTafObj@tcp -h 127.0.0.1 -p 14002", {bEnableConsistentHash:true});
        Promise.all([
            prx.testRpcCall("test", {consistentHash:"test consistentHash hash"}),
            prx.testRpcCall("test", {consistentHash:"test consistentHash hash"})
        ]).then(function (data) {
            var ret0 = data[0].response.return;
            var ret1 = data[1].response.return;
            ret0.should.equal(ret1);
            done()
        }).catch(function (err) {
            done(err.response? err.response.error : err);
        })
    })
});