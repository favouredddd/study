// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `./EndpointF.jce'
// **********************************************************************

var assert    = require('assert');
var TafStream = require(process.env.taf_stream);
var TafError  = require(process.env.taf_rpc_path).error;
var _TAF_MODULE_A_ = require('./EndpointFJce.js');

var taf = taf || {};
module.exports.taf = taf;


taf.QueryFImp = function () { 
    this._name   = undefined;
    this._worker = undefined;
}

taf.QueryFImp.prototype.initialize = function () { 
    //TODO:
}

taf.QueryFImp.prototype.onDispatch = function (current, FuncName, BinBuffer) {
    switch (FuncName) {
        case 'findObjectById' : {
            if (current.getRequestVersion() === TafStream.Wup.WUP_SIMPLE || current.getRequestVersion() === TafStream.Wup.WUP_COMPLEX) {
                var wup = new TafStream.UniAttribute();
                wup.wupVersion = current.getRequestVersion();
                wup.decode(BinBuffer);
                var id = wup.readString("id");
            } else {
                var is = new TafStream.JceInputStream(BinBuffer);
                var id = is.readString(1, true);
            }
            current.sendResponse = function (_ret) {
                if (current.getRequestVersion() === TafStream.Wup.WUP_SIMPLE || current.getRequestVersion() === TafStream.Wup.WUP_COMPLEX) {
                    var wup = new TafStream.UniAttribute();
                    wup.wupVersion = current.getRequestVersion();
                    wup.writeList("", _ret);

                    current.doResponse(wup.encode());
                } else {
                    var os = new TafStream.JceOutputStream();
                    os.writeList(0, _ret);

                    current.doResponse(os.getBinBuffer());
                }
            }

            this.findObjectById(current, id);

            return TafError.SUCCESS;
        }
        case 'findObjectById4Any' : {
            if (current.getRequestVersion() === TafStream.Wup.WUP_SIMPLE || current.getRequestVersion() === TafStream.Wup.WUP_COMPLEX) {
                var wup = new TafStream.UniAttribute();
                wup.wupVersion = current.getRequestVersion();
                wup.decode(BinBuffer);
                var id = wup.readString("id");
                var activeEp = wup.readList("activeEp", TafStream.List(_TAF_MODULE_A_.taf.EndpointF), new TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
                var inactiveEp = wup.readList("inactiveEp", TafStream.List(_TAF_MODULE_A_.taf.EndpointF), new TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
            } else {
                var is = new TafStream.JceInputStream(BinBuffer);
                var id = is.readString(1, true);
                var activeEp = is.readList(2, false, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
                var inactiveEp = is.readList(3, false, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
            }
            current.sendResponse = function (_ret, activeEp, inactiveEp) {
                if (current.getRequestVersion() === TafStream.Wup.WUP_SIMPLE || current.getRequestVersion() === TafStream.Wup.WUP_COMPLEX) {
                    var wup = new TafStream.UniAttribute();
                    wup.wupVersion = current.getRequestVersion();
                    wup.writeInt32("", _ret);
                    wup.writeList("activeEp", activeEp);
                    wup.writeList("inactiveEp", inactiveEp);

                    current.doResponse(wup.encode());
                } else {
                    var os = new TafStream.JceOutputStream();
                    os.writeInt32(0, _ret);
                    os.writeList(2, activeEp);
                    os.writeList(3, inactiveEp);

                    current.doResponse(os.getBinBuffer());
                }
            }

            this.findObjectById4Any(current, id, activeEp, inactiveEp);

            return TafError.SUCCESS;
        }
        case 'findObjectById4All' : {
            if (current.getRequestVersion() === TafStream.Wup.WUP_SIMPLE || current.getRequestVersion() === TafStream.Wup.WUP_COMPLEX) {
                var wup = new TafStream.UniAttribute();
                wup.wupVersion = current.getRequestVersion();
                wup.decode(BinBuffer);
                var id = wup.readString("id");
                var activeEp = wup.readList("activeEp", TafStream.List(_TAF_MODULE_A_.taf.EndpointF), new TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
                var inactiveEp = wup.readList("inactiveEp", TafStream.List(_TAF_MODULE_A_.taf.EndpointF), new TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
            } else {
                var is = new TafStream.JceInputStream(BinBuffer);
                var id = is.readString(1, true);
                var activeEp = is.readList(2, false, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
                var inactiveEp = is.readList(3, false, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
            }
            current.sendResponse = function (_ret, activeEp, inactiveEp) {
                if (current.getRequestVersion() === TafStream.Wup.WUP_SIMPLE || current.getRequestVersion() === TafStream.Wup.WUP_COMPLEX) {
                    var wup = new TafStream.UniAttribute();
                    wup.wupVersion = current.getRequestVersion();
                    wup.writeInt32("", _ret);
                    wup.writeList("activeEp", activeEp);
                    wup.writeList("inactiveEp", inactiveEp);

                    current.doResponse(wup.encode());
                } else {
                    var os = new TafStream.JceOutputStream();
                    os.writeInt32(0, _ret);
                    os.writeList(2, activeEp);
                    os.writeList(3, inactiveEp);

                    current.doResponse(os.getBinBuffer());
                }
            }

            this.findObjectById4All(current, id, activeEp, inactiveEp);

            return TafError.SUCCESS;
        }
        case 'findObjectByIdInSameGroup' : {
            if (current.getRequestVersion() === TafStream.Wup.WUP_SIMPLE || current.getRequestVersion() === TafStream.Wup.WUP_COMPLEX) {
                var wup = new TafStream.UniAttribute();
                wup.wupVersion = current.getRequestVersion();
                wup.decode(BinBuffer);
                var id = wup.readString("id");
                var activeEp = wup.readList("activeEp", TafStream.List(_TAF_MODULE_A_.taf.EndpointF), new TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
                var inactiveEp = wup.readList("inactiveEp", TafStream.List(_TAF_MODULE_A_.taf.EndpointF), new TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
            } else {
                var is = new TafStream.JceInputStream(BinBuffer);
                var id = is.readString(1, true);
                var activeEp = is.readList(2, false, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
                var inactiveEp = is.readList(3, false, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
            }
            current.sendResponse = function (_ret, activeEp, inactiveEp) {
                if (current.getRequestVersion() === TafStream.Wup.WUP_SIMPLE || current.getRequestVersion() === TafStream.Wup.WUP_COMPLEX) {
                    var wup = new TafStream.UniAttribute();
                    wup.wupVersion = current.getRequestVersion();
                    wup.writeInt32("", _ret);
                    wup.writeList("activeEp", activeEp);
                    wup.writeList("inactiveEp", inactiveEp);

                    current.doResponse(wup.encode());
                } else {
                    var os = new TafStream.JceOutputStream();
                    os.writeInt32(0, _ret);
                    os.writeList(2, activeEp);
                    os.writeList(3, inactiveEp);

                    current.doResponse(os.getBinBuffer());
                }
            }

            this.findObjectByIdInSameGroup(current, id, activeEp, inactiveEp);

            return TafError.SUCCESS;
        }
        case 'findObjectByIdInSameStation' : {
            if (current.getRequestVersion() === TafStream.Wup.WUP_SIMPLE || current.getRequestVersion() === TafStream.Wup.WUP_COMPLEX) {
                var wup = new TafStream.UniAttribute();
                wup.wupVersion = current.getRequestVersion();
                wup.decode(BinBuffer);
                var id = wup.readString("id");
                var sStation = wup.readString("sStation");
                var activeEp = wup.readList("activeEp", TafStream.List(_TAF_MODULE_A_.taf.EndpointF), new TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
                var inactiveEp = wup.readList("inactiveEp", TafStream.List(_TAF_MODULE_A_.taf.EndpointF), new TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
            } else {
                var is = new TafStream.JceInputStream(BinBuffer);
                var id = is.readString(1, true);
                var sStation = is.readString(2, true);
                var activeEp = is.readList(3, false, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
                var inactiveEp = is.readList(4, false, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
            }
            current.sendResponse = function (_ret, activeEp, inactiveEp) {
                if (current.getRequestVersion() === TafStream.Wup.WUP_SIMPLE || current.getRequestVersion() === TafStream.Wup.WUP_COMPLEX) {
                    var wup = new TafStream.UniAttribute();
                    wup.wupVersion = current.getRequestVersion();
                    wup.writeInt32("", _ret);
                    wup.writeList("activeEp", activeEp);
                    wup.writeList("inactiveEp", inactiveEp);

                    current.doResponse(wup.encode());
                } else {
                    var os = new TafStream.JceOutputStream();
                    os.writeInt32(0, _ret);
                    os.writeList(3, activeEp);
                    os.writeList(4, inactiveEp);

                    current.doResponse(os.getBinBuffer());
                }
            }

            this.findObjectByIdInSameStation(current, id, sStation, activeEp, inactiveEp);

            return TafError.SUCCESS;
        }
        case 'findObjectByIdInSameSet' : {
            if (current.getRequestVersion() === TafStream.Wup.WUP_SIMPLE || current.getRequestVersion() === TafStream.Wup.WUP_COMPLEX) {
                var wup = new TafStream.UniAttribute();
                wup.wupVersion = current.getRequestVersion();
                wup.decode(BinBuffer);
                var id = wup.readString("id");
                var setId = wup.readString("setId");
                var activeEp = wup.readList("activeEp", TafStream.List(_TAF_MODULE_A_.taf.EndpointF), new TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
                var inactiveEp = wup.readList("inactiveEp", TafStream.List(_TAF_MODULE_A_.taf.EndpointF), new TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
            } else {
                var is = new TafStream.JceInputStream(BinBuffer);
                var id = is.readString(1, true);
                var setId = is.readString(2, true);
                var activeEp = is.readList(3, false, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
                var inactiveEp = is.readList(4, false, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
            }
            current.sendResponse = function (_ret, activeEp, inactiveEp) {
                if (current.getRequestVersion() === TafStream.Wup.WUP_SIMPLE || current.getRequestVersion() === TafStream.Wup.WUP_COMPLEX) {
                    var wup = new TafStream.UniAttribute();
                    wup.wupVersion = current.getRequestVersion();
                    wup.writeInt32("", _ret);
                    wup.writeList("activeEp", activeEp);
                    wup.writeList("inactiveEp", inactiveEp);

                    current.doResponse(wup.encode());
                } else {
                    var os = new TafStream.JceOutputStream();
                    os.writeInt32(0, _ret);
                    os.writeList(3, activeEp);
                    os.writeList(4, inactiveEp);

                    current.doResponse(os.getBinBuffer());
                }
            }

            this.findObjectByIdInSameSet(current, id, setId, activeEp, inactiveEp);

            return TafError.SUCCESS;
        }
    }
    return TafError.SERVER.FUNC_NOT_FOUND;
}

taf.QueryFImp.prototype.findObjectById = function (current, id) {
    //TODO:
    assert.fail('findObjectById function not implemented');
}

taf.QueryFImp.prototype.findObjectById4Any = function (current, id, activeEp, inactiveEp) {
    //TODO:
    assert.fail('findObjectById4Any function not implemented');
}

taf.QueryFImp.prototype.findObjectById4All = function (current, id, activeEp, inactiveEp) {
    //TODO:
    assert.fail('findObjectById4All function not implemented');
}

taf.QueryFImp.prototype.findObjectByIdInSameGroup = function (current, id, activeEp, inactiveEp) {
    //TODO:
    assert.fail('findObjectByIdInSameGroup function not implemented');
}

taf.QueryFImp.prototype.findObjectByIdInSameStation = function (current, id, sStation, activeEp, inactiveEp) {
    //TODO:
    assert.fail('findObjectByIdInSameStation function not implemented');
}

taf.QueryFImp.prototype.findObjectByIdInSameSet = function (current, id, setId, activeEp, inactiveEp) {
    //TODO:
    assert.fail('findObjectByIdInSameSet function not implemented');
}





