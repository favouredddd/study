const logger = require("./WowLogger").getLogger("WowConfiguration")
const TafConfig = require("@tencent/taf-config")
const assert = require("assert")

class WowConfiguration {
  /**
   * 构造方法
   * @param {string} baseDirName 配置文件所在的文件夹路径
   * @param {string | array[string]} configNames 需要被加载的配置文件名
   */
  constructor(baseDirName = __dirname, configNames = [], format = "JSON") {
    this.config = { content: {} }
    this.baseDirName = baseDirName
    assert.deepStrictEqual(
      typeof configNames === "string" || Array.isArray(configNames),
      true,
      "the configNames should be an array or string"
    )
    if (typeof configNames === "string") {
      this.configNames = [configNames]
    }
    this.configNames = configNames
    this.configList = []
    this.tafConfig = {}
    this.format = {
      format: format.toUpperCase()
    }
  }
  /**
   * 监听文件变化推送事件
   */
  async fileChangeListener(filename) {
    if (!this.configList.includes(filename)) {
      logger.error(`the file you want to push ${filename} is not in the config list,will do nothing`)
      return
    }
    const pushConfigContent = await this.tafConfig.loadConfig(filename, this.format)
    this.config.content = Object.assign(this.config.content, pushConfigContent)
    logger.info(`push file ${filename} success`)
  }
  /**
   * 解析配置文件
   */
  async autoResolve() {
    // 本地环境
    let dockerEnv = process.env.DOCKER_ENV
    let tafConfigEnv = process.env.TAF_CONFIG
    if (dockerEnv) {
      this.config.content = require(`${this.baseDirName}/${dockerEnv}`)
    } else {
      try {
        this.config.content = require(`${this.baseDirName}/local`)
      } catch (e) {
        logger.error("autoResolve() when to load the local config file exception >> ", e.message)
        process.exit(-1)
      }
    }
    // 通过node-agent 或者 TAF 平台启动
    if (tafConfigEnv) {
      this.tafConfig = new TafConfig(tafConfigEnv)
      // 获取服务端所有配置文件名
      this.configList = await this.tafConfig.loadList()
      if (this.configNames.length === 0) {
        this.configNames = this.configList
      }
      for (let targetConfig of this.configNames) {
        if (!this.configList.includes(targetConfig)) {
          logger.error(`autoResolve() the targetConfig ${targetConfig} is not in the config list`)
          process.exit(-2)
        }
        let targetConfigContent = await this.tafConfig.loadConfig(targetConfig, this.format)
        this.config.content = Object.assign(this.config.content, targetConfigContent)
      }
      // 热加载
      this.tafConfig.on("configPushed", this.fileChangeListener.bind(this))
    }
    return this.config
  }
}

module.exports = WowConfiguration
