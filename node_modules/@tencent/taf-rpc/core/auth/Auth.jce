module taf
{

// 认证状态：
enum AUTH_STATE
{
    AUTH_INIT               = -127, // 鉴权的初始状态
    AUTH_SUCC               = 0,    // 鉴权成功完成
    AUTH_WAIT_RSP           = 127,  // 等待AUTH服务鉴权返回

    AUTH_PROTO_ERR          = -100, // 协议错误
    AUTH_WRONG_OBJ          = -101, // obj错误
    AUTH_WRONG_AK           = -102, // AK
    AUTH_WRONG_TIME         = -103, // 错误的时间戳
    AUTH_NOT_SUPPORT_ENC    = -104, // 不支持的加解密方法
    AUTH_DEC_FAIL           = -105, // 解密失败,可能是密钥错误
    AUTH_ERROR              = -106, // 鉴权错误
    // 其它正数 : 认证的中间状态，用户自定义; 
    // 其它负数 : 认证的失败状态，用户自定义;
};

/*
* 鉴权基础信息,本地使用
*/
struct BasicAuthInfo 
{ 
    1 optional string sObjName; 
    2 optional string sAccessKey; // AK 
    3 optional string sSecretKey; // SK plainText
    4 optional string sHashSecretKey2; // or SK with sha 2 times, ascii format
    5 optional string sUserData; // user data
};

/*
* 客户端发送的基础鉴权打包信息
*/
struct BasicAuthPackage
{ 
    1 require string sObjName; 
    2 require string sAccessKey; // AK 
    3 require long iTime; // timestamp
    4 optional string sHashMethod = "sha1";

    // 签名使用方法
    // 1. tmpKey = sha1(secret2 | timestamp); 客户端服务器都知道
    // 2. client use tmpKey to enc secret1, ie, the client knows secret
    // 3. server use tmpKey to dec secret1, then sha1(secret1) to check if ok
    //5 optional string sSignature; 
    5 optional vector<byte> sSignature; 
};

// 认证类型：
enum AUTH_TYPE
{
    AUTH_TYPENONE = 0, // 无
    AUTH_TYPELOCAL = 1, // 业务server本地鉴权
    AUTH_TYPEANONY = 2, // 鉴权允许匿名
    //AUTH_TYPEREMOTE = 2, // 异步鉴权不再支持，201804
};


/*
* 鉴权请求,从业务server到AUTH
*/
struct AuthRequest
{
	1 require string sObjName;
	2 require string sRequest;
	3 require int iFd;
	4 require long iUid;
};

/*
* 鉴权结果,从AUTH到业务server
*/
struct AuthResponse
{
	1 require int iState;
	2 require int iFd;
	3 require long iUid;
};

/*
* 账号请求,从业务server到AUTH
*/
struct AkRequest
{
	1 require vector<string> vObjName;
};

/*
* 账号库,从AUTH到业务server
*/
struct AkResponse
{
	1 require string sObjName;
	2 require map<string, string> mAkSk;
};

/*
* req 申请SECRET,从xx到AUTH,xx需要认证，最好是白名单
*/
struct SecretRequest
{
	1 require string sObjName;
	2 require string sAccessKey;
	3 require int iSecretLen;
};

/*
* rsp 申请SECRET,从xx到AUTH,xx需要认证，最好是白名单
*/
struct SecretResponse
{
	1 require string sObjName;
	2 require string sAccessKey;

    //明文返回
	3 require string sSecretKey;
};


interface Auth
{
    /**
    * 请求远程鉴权
    **/
    AuthResponse authProcess(AuthRequest request);
    /**
    * 请求账号库
    **/
    vector<AkResponse> refreshAk(AkRequest request);
    /**
    * 创建账号
    **/
    SecretResponse applySecret(SecretRequest request);
};

};
