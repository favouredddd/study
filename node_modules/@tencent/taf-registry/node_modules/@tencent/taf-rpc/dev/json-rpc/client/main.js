process.env.taf_rpc_path = "../../../";
process.env.taf_rpc_json = "../../../../taf-rpc-json";

var Comm         = require(process.env.taf_rpc_path).Communicator.New();
var Protocol     = require(process.env.taf_rpc_json).client;
var ServantProxy = require(process.env.taf_rpc_path).ServantProxy;

//STEP01 使用通信器初始化一个代理类
var prx = Comm.stringToProxy(ServantProxy, "test@tcp -h 127.0.0.1 -p 12306 -t 60000");
//var prx = Comm.stringToProxy(ServantProxy, "test@udp -h 127.0.0.1 -p 12306 -t 60000");

//STEP02 给这个代理类设置编解码打包器
prx.setProtocol(Protocol);

//STEP03 创建服务接口
prx.rpc.createFunc("echo");
prx.rpc.createFunc("getUserName");

//STEP04 开始调用接口
var success = function (result) {
    console.log("result.response.costtime:",      result.response.costtime);
    console.log("result.response.appBuffer:",     result.response.appBuffer);

    console.log("LocalEndpoint:",  result.request.LocalEndpoint.toString());
    console.log("RemoteEndpoint:", result.request.RemoteEndpoint.toString());
}

var error = function (result) {
    console.log("result.response.costtime:",      result.response.costtime);
    console.log("result.response.error.code:",    result.response.error.code);
    console.log("result.response.error.message:", result.response.error.message);
}

prx.rpc.echo("tencent", "mig", "abc").then(success, error).done();          //由于在服务端的EchoHandle中没有定义该函数，所以会进入服务端的EchoHandle.doRequest

prx.rpc.getUserName("tencent", "mig", "abc").then(success, error).done();   //由于在服务端的EchoHandle中已经定义getUserName函数，所以会进入服务端的EchoHandle.getUserName
