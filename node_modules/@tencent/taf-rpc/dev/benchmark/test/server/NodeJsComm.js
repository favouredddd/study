// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `NodeJsComm.jce'
// **********************************************************************

var Taf      = require('@tencent/taf-stream');
var TafError = require('../../../../taf-rpc').error;

var TRom = TRom || {};
module.exports.TRom = TRom;

TRom.User_t = function() {
    this.id = 0;
    this.score = 0;
    this.name = "";
};
TRom.User_t._write = function (os, tag, value) { os.writeStruct(tag, value); }
TRom.User_t._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
TRom.User_t._readFrom = function (is) {
    var tmp = new TRom.User_t();
    tmp.id = is.readInt32(0, false, Taf.Int32);
    tmp.score = is.readFloat(1, false, Taf.Float);
    tmp.name = is.readString(2, false, Taf.String);
    return tmp;
};
TRom.User_t.prototype._writeTo = function (os) {
    os.writeInt32(0, this.id);
    os.writeFloat(1, this.score);
    os.writeString(2, this.name);
};
TRom.User_t.prototype.__equal__ = function (anItem) {
    return anItem.id === this.id
    && anItem.score === this.score
    && anItem.name === this.name;
}
TRom.User_t.prototype.toString = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
TRom.User_t.prototype.toBinBuffer = function () {
    var os = new Taf.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
TRom.User_t.create = function (is) {
    return TRom.User_t._readFrom(is);
}
TRom.Result_t = function() {
    this.id = 0;
};
TRom.Result_t._write = function (os, tag, value) { os.writeStruct(tag, value); }
TRom.Result_t._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
TRom.Result_t._readFrom = function (is) {
    var tmp = new TRom.Result_t();
    tmp.id = is.readInt32(0, false, Taf.Int32);
    return tmp;
};
TRom.Result_t.prototype._writeTo = function (os) {
    os.writeInt32(0, this.id);
};
TRom.Result_t.prototype.__equal__ = function (anItem) {
    return anItem.id === this.id;
}
TRom.Result_t.prototype.toString = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
TRom.Result_t.prototype.toBinBuffer = function () {
    var os = new Taf.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
TRom.Result_t.create = function (is) {
    return TRom.Result_t._readFrom(is);
}


TRom.User_t = function() {
    this.id = 0;
    this.score = 0;
    this.name = "";
};
TRom.User_t._write = function (os, tag, value) { os.writeStruct(tag, value); }
TRom.User_t._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
TRom.User_t._readFrom = function (is) {
    var tmp = new TRom.User_t();
    tmp.id = is.readInt32(0, false, Taf.Int32);
    tmp.score = is.readFloat(1, false, Taf.Float);
    tmp.name = is.readString(2, false, Taf.String);
    return tmp;
};
TRom.User_t.prototype._writeTo = function (os) {
    os.writeInt32(0, this.id);
    os.writeFloat(1, this.score);
    os.writeString(2, this.name);
};
TRom.User_t.prototype.__equal__ = function (anItem) {
    return anItem.id === this.id
    && anItem.score === this.score
    && anItem.name === this.name;
}
TRom.User_t.prototype.toString = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
TRom.User_t.prototype.toBinBuffer = function () {
    var os = new Taf.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
TRom.User_t.create = function (is) {
    return TRom.User_t._readFrom(is);
}

TRom.Result_t = function() {
    this.id = 0;
};
TRom.Result_t._write = function (os, tag, value) { os.writeStruct(tag, value); }
TRom.Result_t._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
TRom.Result_t._readFrom = function (is) {
    var tmp = new TRom.Result_t();
    tmp.id = is.readInt32(0, false, Taf.Int32);
    return tmp;
};
TRom.Result_t.prototype._writeTo = function (os) {
    os.writeInt32(0, this.id);
};
TRom.Result_t.prototype.__equal__ = function (anItem) {
    return anItem.id === this.id;
}
TRom.Result_t.prototype.toString = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
TRom.Result_t.prototype.toBinBuffer = function () {
    var os = new Taf.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
TRom.Result_t.create = function (is) {
    return TRom.Result_t._readFrom(is);
}

TRom.NodeJsCommImp = function () { 
    this._name   = undefined;
    this._worker = undefined;
}

TRom.NodeJsCommImp.prototype.initialize = function () { 
    //TODO:
}

TRom.NodeJsCommImp.prototype.onDispatch = function (current, FuncName, BinBuffer) { 
    switch (FuncName) {
        case 'testInt' : {
            var is = new Taf.JceInputStream(BinBuffer);
            var inInt = is.readInt32(1, true);

            current.sendResponse = function (_ret, outInt) {
                var os = new Taf.JceOutputStream();
                os.writeInt32(0, _ret);
                os.writeInt32(2, outInt);

                current.doResponse(os.getBinBuffer());
            }

            this.testInt(current, inInt);

            return TafError.SUCCESS;
        }
        case 'getUsrName' : {
            var is = new Taf.JceInputStream(BinBuffer);
            var sUsrName = is.readString(1, true, Taf.String);
            var sValue1 = is.readString(2, false, Taf.String);
            var sValue2 = is.readString(3, false, Taf.String);

            current.sendResponse = function (_ret, sValue1, sValue2) {
                var os = new Taf.JceOutputStream();
                os.writeInt32(0, _ret);
                os.writeString(2, sValue1);
                os.writeString(3, sValue2);

                current.doResponse(os.getBinBuffer());
            }

            this.getUsrName(current, sUsrName, sValue1, sValue2);

            return TafError.SUCCESS;
        }
        case 'getall' : {
            var is = new Taf.JceInputStream(BinBuffer);
            var stUser = is.readStruct(1, true, TRom.User_t);
            var stResult = is.readStruct(2, false, TRom.Result_t);

            current.sendResponse = function (_ret, stResult) {
                var os = new Taf.JceOutputStream();
                os.writeInt32(0, _ret);
                os.writeStruct(2, stResult);

                current.doResponse(os.getBinBuffer());
            }

            this.getall(current, stUser, stResult);

            return TafError.SUCCESS;
        }
        case 'test' : {
            current.sendResponse = function (_ret) {
                var os = new Taf.JceOutputStream();
                os.writeInt32(0, _ret);

                current.doResponse(os.getBinBuffer());
            }

            this.test(current);

            return TafError.SUCCESS;
        }
    }
    return TafError.SERVER.FUNC_NOT_FOUND;
}

TRom.NodeJsCommImp.prototype.getUsrName = function (current, sUsrName, sValue1, sValue2) {
    //TODO:

}

TRom.NodeJsCommImp.prototype.getall = function (current, stUser, stResult) {
    //TODO:

}

TRom.NodeJsCommImp.prototype.test = function (current) {
    //TODO:

}





