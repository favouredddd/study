/**
 * @author : pigozhu
 * @desc :
 */
const TAF = require("@tencent/taf-rpc")
const BaseContext = require("../common/base_context")

class TafStarter extends BaseContext {
  constructor(options = {}) {
    super()
    this._servants = options
    this._servantMap = {}
    options.forEach(servant => {
      let implPath = require("path").resolve(__dirname, "../../../../../", servant.impl)
      this._servantMap[servant.objName] = {
        impl: require(implPath)[servant.module][servant.interface + "Imp"],
        port: servant.port
      }
    })
  }

  start() {
    let servants = null
    if (process.env.TAF_CONFIG) {
      servants = TAF.server.getServant(process.env.TAF_CONFIG)
    } else if (this._configFilePath) {
      servants = TAF.server.getServant(this._configFilePath)
    } else {
      servants = this._servants.map(item => {
        return {
          allow: true,
          endpoint: `tcp -h ${item.host} -p ${item.port} -t 60000`,
          protocol: "taf",
          servant: item.objName
        }
      })
    }
    servants.forEach(config => {
      let impl = this._servantMap[config.servant].impl
      if (impl) {
        let svr = TAF.server.createServer(impl)
        svr.start(config)
        this._logger.info(`===============  The taf servant start with ${config.endpoint}=============== `)
      } else {
        this._logger.error("Servant Not Exist..." + config.servant)
      }
    })
  }
}

module.exports = TafStarter
