/**
 * @author : pigozhu
 * @desc :
 */
const KoaRouter = require("koa-router")
const debug = require("debug")
const path = require("path")

class WowRouter extends KoaRouter {
  constructor(options) {
    super()
    this.properties = {}
  }

  routes(app) {
    // 处理taf实现
    if (app && app._servants) {
      app._servants.forEach(servant => {
        let implPath = path.resolve(__dirname, "../../../../../", servant.impl)
        let ImplProxy = Object.create(require(implPath)[servant.module][servant.interface + "Imp"])
        // servant.impl = ImplProxy
        for (let method in this.properties) {
          ImplProxy.prototype[method] = async (...args) => {
            try {
              const context = args[0].getContext().toObject()
              args.push(context)
              await this.properties[method](...args)
            } catch (e) {
              if (app._errorHandler) {
                try {
                  app._errorHandler(e, ...args)
                } catch (err) {
                  throw new Error("something error with the errorHandler")
                }
              } else {
                let current = args[0]
                let rsp = args[args.length - 1]
                rsp.result.code = -100
                rsp.result.msg = "something goes wrong in the impl with yourself"
                current.sendResponse(-1, rsp)
              }
            }
          }
        }
      })
    }

    let dispatch = super.routes()
    dispatch.router = this
    if (this._proxy) {
      return { dispatch, proxy: true }
    } else {
      return dispatch
    }
  }
  // 方法重名冲突可能有问题
  invoke(method, serviceFunction) {
    this.properties[method] = serviceFunction
  }
}

module.exports = WowRouter
