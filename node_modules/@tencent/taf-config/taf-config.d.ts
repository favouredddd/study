// Type defined by feihua

import { EventEmitter } from 'events'

declare enum Format {
  C = 'C',
  JSON = 'JSON',
  TEXT = 'TEXT'
}

declare enum Location {
  SERVER = 'SERVER',
  APP = 'APP'
}

interface TafConfigOptions {
  format?: Format,
  location?: Location
}

interface Config<T = any> {
  filename: string,
  content: T
}

declare class TafConfig extends EventEmitter {
  /**
   * 创建 TafConfig 实例
   * @param data taf 配置文件路径, 或已配置的 @tencent/taf-config-parser 实例. 如果服务通过 node-agent (或在TAF平台) 运行，则无需传入
   */
  constructor (data?: any)

  /** 配置文件的格式 */
  readonly FORMAT: typeof Format

  /** 配置文件存放的区域 */
  readonly LOCATION: typeof Location

  /** 获取默认配置文件 (文件名由 App.Server.conf 组成) */
  loadServerConfig<T = any> (options?: TafConfigOptions): Promise<T>

  /** 获取配置文件列表 (所有配置文件名) */
  loadList (options?: TafConfigOptions): Promise<string[]>

  /** 获取配置文件内容 */
  loadConfig (): Promise<Config[]>
  loadConfig<T = any> (fileName: string, options?: TafConfigOptions): Promise<T>
  loadConfig (fileNames: string[], options?: TafConfigOptions): Promise<Config[]>
}

declare namespace TafConfig {}

export = TafConfig
