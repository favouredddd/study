/**
 * Created by czzou on 2018/11/19.
 */
var tea = require("./tea")
var crypto = require('crypto');
function getHash(str,hashType){
    hashType = hashType ? hashType : "sha1"
    var hash=crypto.createHash(hashType);
    return hash.update(str).digest()
}
function printBuf(name,buf){
    var arr = []
    for(var i=0;i<buf.length;i++){
        arr.push(buf[i] << 24 >>24)
    }
    console.log(name, ":",arr.join(" "))
    console.log(name, ":",buf)
}
function testEnAndDe(){

    var input = getHash("asdfasdfasdfasdf","sha1");
    input = Buffer.from(input.toString("hex"))
    var key = getHash("12345678","md5");
    console.log(input.toString("hex"));
    console.log("key",key,key.toString("hex"))
    console.log("input byteLength",input.byteLength)

//for(var i=0;i<key.byteLength;i++){
//    console.log("key[i]",key.readInt8(i))
//}

    function printBufferInt(buf){
        var arr = []
        for(var i=0;i<buf.byteLength;i++){
            //console.log("key[i]",key.readInt8(i))
            arr.push(buf.readInt8(i))
        }
        console.log(arr.join(" "))
    }
    console.log("input:",input);
    var encrypted = tea.encrypt(key,input);
    console.log("encrypted:",encrypted);
    var decrypted = tea.decrypt(key,encrypted);
    console.log("decrypted:",decrypted);
}
//20c38347546ef5f67d77c3b80e8e9db5 ,
//2a0cf5bc2b2d1ac2bd95b24db1519bfb2d2df47948ddeee9cde19003fb1d6176f0a31129f1a18ad94b772577097bdc8765afc0aaa45398e3
function testEnAndDe2(){

    var key=Buffer.from("20c38347546ef5f67d77c3b80e8e9db5","hex");
    var input =Buffer.from("2a0cf5bc2b2d1ac2bd95b24db1519bfb2d2df47948ddeee9cde19003fb1d6176f0a31129f1a18ad94b772577097bdc8765afc0aaa45398e3","hex");
    function printBufferInt(buf){
        var arr = []
        for(var i=0;i<buf.byteLength;i++){
            //console.log("key[i]",key.readInt8(i))
            arr.push(buf.readInt8(i))
        }
        console.log(arr.join(" "))
    }
    console.log("input:",input);
    var encrypted = tea.encrypt(key,input);
    console.log("encrypted:",encrypted);
    var decrypted = tea.decrypt(key,encrypted);
    console.log("decrypted:",decrypted);
}

function testFull(){
    var secret1 = getHash(Buffer.from("123456"), "sha1").toString("hex");
    printBuf("secret1",secret1)
    var now = 1544545185;
    var tmp = Buffer.alloc(8);
    var secret2,tmpKey;
    secret2 = getHash(secret1, "sha1").toString("hex");
    printBuf("secret2",secret2)
    secret2 = Buffer.from(secret2)
    printBuf("secret2",secret2)
    tmp.writeUInt32LE(now, 0);
    console.log("time tmp",tmp)
    for(var i=0;i<tmp.length;i++){
        secret2[i] = secret2[i] | tmp[i];
    }
    tmpKey = getHash(secret2, "md5");
    printBuf("tmpKey",tmpKey)
    var input = Buffer.from(secret1)
    console.log("input:",input)
    var secret1Enc = tea.encrypt(tmpKey,input);
    console.log("secret1Enc len",secret1Enc.byteLength)
    printBuf("secret1Enc",secret1Enc)
    printBuf("tmpKey de",tmpKey)
    var decrypted = tea.decrypt(tmpKey,secret1Enc);
    console.log("decrypted:",decrypted);
}

testFull()