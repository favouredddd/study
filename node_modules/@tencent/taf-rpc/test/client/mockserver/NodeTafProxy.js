// **********************************************************************
// Parsed By TafParser(3.2.2.20), Generated By jce2node(20190325)
// TafParser Maintained By <TAF> and jce2node Maintained By <superzheng>
// Generated from "NodeTaf.jce" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var TafStream = require("@tencent/taf-stream");
var TafError  = require("@tencent/taf-rpc").error;

var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TafError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var TRom = TRom || {};
module.exports.TRom = TRom;

TRom.NodeTafProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

TRom.NodeTafProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

TRom.NodeTafProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

TRom.NodeTafProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

TRom.NodeTafProxy.prototype.getVersion = function () {
    return this._worker.version;
};

var __TRom_NodeTaf$test$IF = {
    "name" : "test",
    "return" : "int32",
    "arguments" : []
};

var __TRom_NodeTaf$test$IE = function () {
    var os = new TafStream.JceOutputStream();
    return os.getBinBuffer();
};

var __TRom_NodeTaf$test$ID = function (data) {
    try {
        var is = new TafStream.JceInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TafError.CLIENT.DECODE_ERROR);
    }
};

var __TRom_NodeTaf$test$PE = function (__$PROTOCOL$VERSION) {
    var wup = new TafStream.UniAttribute();
    wup.wupVersion = __$PROTOCOL$VERSION;
    return wup;
};

var __TRom_NodeTaf$test$PD = function (data) {
    try {
        var wup = data.response.wup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : wup.readInt32("", 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TafError.CLIENT.DECODE_ERROR);
    }
};

var __TRom_NodeTaf$test$ER = function (data) {
    throw _makeError(data, "Call NodeTaf::test failed");
};

TRom.NodeTafProxy.prototype.test = function () {
    var version = this._worker.version;
    if (version === TafStream.Wup.WUP_SIMPLE || version === TafStream.Wup.WUP_COMPLEX) {
        return this._worker.wup_invoke("test", __TRom_NodeTaf$test$PE(version), arguments[arguments.length - 1], __TRom_NodeTaf$test$IF).then(__TRom_NodeTaf$test$PD, __TRom_NodeTaf$test$ER);
    } else {
        return this._worker.taf_invoke("test", __TRom_NodeTaf$test$IE(), arguments[arguments.length - 1], __TRom_NodeTaf$test$IF).then(__TRom_NodeTaf$test$ID, __TRom_NodeTaf$test$ER);
    }
};
TRom.NodeTafProxy.test = __TRom_NodeTaf$test$IF;

var __TRom_NodeTaf$testContext$IF = {
    "name" : "testContext",
    "return" : "int32",
    "arguments" : []
};

var __TRom_NodeTaf$testContext$IE = function () {
    var os = new TafStream.JceOutputStream();
    return os.getBinBuffer();
};

var __TRom_NodeTaf$testContext$ID = function (data) {
    try {
        var is = new TafStream.JceInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TafError.CLIENT.DECODE_ERROR);
    }
};

var __TRom_NodeTaf$testContext$PE = function (__$PROTOCOL$VERSION) {
    var wup = new TafStream.UniAttribute();
    wup.wupVersion = __$PROTOCOL$VERSION;
    return wup;
};

var __TRom_NodeTaf$testContext$PD = function (data) {
    try {
        var wup = data.response.wup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : wup.readInt32("", 0)
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TafError.CLIENT.DECODE_ERROR);
    }
};

var __TRom_NodeTaf$testContext$ER = function (data) {
    throw _makeError(data, "Call NodeTaf::testContext failed");
};

TRom.NodeTafProxy.prototype.testContext = function () {
    var version = this._worker.version;
    if (version === TafStream.Wup.WUP_SIMPLE || version === TafStream.Wup.WUP_COMPLEX) {
        return this._worker.wup_invoke("testContext", __TRom_NodeTaf$testContext$PE(version), arguments[arguments.length - 1], __TRom_NodeTaf$testContext$IF).then(__TRom_NodeTaf$testContext$PD, __TRom_NodeTaf$testContext$ER);
    } else {
        return this._worker.taf_invoke("testContext", __TRom_NodeTaf$testContext$IE(), arguments[arguments.length - 1], __TRom_NodeTaf$testContext$IF).then(__TRom_NodeTaf$testContext$ID, __TRom_NodeTaf$testContext$ER);
    }
};
TRom.NodeTafProxy.testContext = __TRom_NodeTaf$testContext$IF;

var __TRom_NodeTaf$testRpcCall$IF = {
    "name" : "testRpcCall",
    "return" : "int32",
    "arguments" : [{
        "name" : "sUsrName",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "sValue",
        "class" : "string",
        "direction" : "out"
    }]
};

var __TRom_NodeTaf$testRpcCall$IE = function (sUsrName) {
    var os = new TafStream.JceOutputStream();
    os.writeString(1, sUsrName);
    return os.getBinBuffer();
};

var __TRom_NodeTaf$testRpcCall$ID = function (data) {
    try {
        var is = new TafStream.JceInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "sValue" : is.readString(2, true, "")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TafError.CLIENT.DECODE_ERROR);
    }
};

var __TRom_NodeTaf$testRpcCall$PE = function (sUsrName, __$PROTOCOL$VERSION) {
    var wup = new TafStream.UniAttribute();
    wup.wupVersion = __$PROTOCOL$VERSION;
    wup.writeString("sUsrName", sUsrName);
    return wup;
};

var __TRom_NodeTaf$testRpcCall$PD = function (data) {
    try {
        var wup = data.response.wup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : wup.readInt32("", 0),
                "arguments" : {
                    "sValue" : wup.readString("sValue")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TafError.CLIENT.DECODE_ERROR);
    }
};

var __TRom_NodeTaf$testRpcCall$ER = function (data) {
    throw _makeError(data, "Call NodeTaf::testRpcCall failed");
};

TRom.NodeTafProxy.prototype.testRpcCall = function (sUsrName) {
    var version = this._worker.version;
    if (version === TafStream.Wup.WUP_SIMPLE || version === TafStream.Wup.WUP_COMPLEX) {
        return this._worker.wup_invoke("testRpcCall", __TRom_NodeTaf$testRpcCall$PE(sUsrName, version), arguments[arguments.length - 1], __TRom_NodeTaf$testRpcCall$IF).then(__TRom_NodeTaf$testRpcCall$PD, __TRom_NodeTaf$testRpcCall$ER);
    } else {
        return this._worker.taf_invoke("testRpcCall", __TRom_NodeTaf$testRpcCall$IE(sUsrName), arguments[arguments.length - 1], __TRom_NodeTaf$testRpcCall$IF).then(__TRom_NodeTaf$testRpcCall$ID, __TRom_NodeTaf$testRpcCall$ER);
    }
};
TRom.NodeTafProxy.testRpcCall = __TRom_NodeTaf$testRpcCall$IF;



