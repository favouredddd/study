// **********************************************************************
// Parsed By TAFParser(3.2.2.11), Generated By Jce2Node(20180425)
// TAFParser Maintained By <WSRD> and Jce2Node Maintained By <superzheng>
// Generated from "PropertyPlusF.jce" by Client Mode
// **********************************************************************

"use strict";

var assert    = require("assert");
var TafStream = require("@tencent/taf-stream");
var TafError  = require("@tencent/taf-rpc").error;

var LogStat = LogStat || {};
module.exports.LogStat = LogStat;

LogStat.PropertyPlushFProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
};

LogStat.PropertyPlushFProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

LogStat.PropertyPlushFProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};


LogStat.StatLog = function() {
    this.logname = "";
    this.content = new TafStream.List(TafStream.String, 1);
    this.date = "";
    this.flag = "";
    this.extend = 0;
    this._classname = "LogStat.StatLog";
};
LogStat.StatLog._classname = "LogStat.StatLog";
LogStat.StatLog._write = function (os, tag, value) { os.writeStruct(tag, value); };
LogStat.StatLog._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LogStat.StatLog._readFrom = function (is) {
    var tmp = new LogStat.StatLog();
    tmp.logname = is.readString(0, true, "");
    tmp.content = is.readList(1, true, TafStream.List(TafStream.String, 1));
    tmp.date = is.readString(2, false, "");
    tmp.flag = is.readString(3, false, "");
    tmp.extend = is.readInt32(4, false, 0);
    return tmp;
};
LogStat.StatLog.prototype._writeTo = function (os) {
    os.writeString(0, this.logname);
    os.writeList(1, this.content);
    os.writeString(2, this.date);
    os.writeString(3, this.flag);
    os.writeInt32(4, this.extend);
};
LogStat.StatLog.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LogStat.StatLog.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LogStat.StatLog.prototype.toObject = function() { 
    return {
        "logname" : this.logname,
        "content" : this.content.toObject(),
        "date" : this.date,
        "flag" : this.flag,
        "extend" : this.extend
    };
};
LogStat.StatLog.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("logname") && (this.logname = json.logname);
    json.hasOwnProperty("content") && (this.content.readFromObject(json.content));
    json.hasOwnProperty("date") && (this.date = json.date);
    json.hasOwnProperty("flag") && (this.flag = json.flag);
    json.hasOwnProperty("extend") && (this.extend = json.extend);
};
LogStat.StatLog.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LogStat.StatLog.new = function () {
    return new LogStat.StatLog();
};
LogStat.StatLog.create = function (is) {
    return LogStat.StatLog._readFrom(is);
};

LogStat.StatValue = function() {
    this.policy = "";
    this.value = 0;
    this.count = 0;
    this._classname = "LogStat.StatValue";
};
LogStat.StatValue._classname = "LogStat.StatValue";
LogStat.StatValue._write = function (os, tag, value) { os.writeStruct(tag, value); };
LogStat.StatValue._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LogStat.StatValue._readFrom = function (is) {
    var tmp = new LogStat.StatValue();
    tmp.policy = is.readString(0, true, "");
    tmp.value = is.readFloat(1, true, 0);
    tmp.count = is.readInt64(2, true, 0);
    return tmp;
};
LogStat.StatValue.prototype._writeTo = function (os) {
    os.writeString(0, this.policy);
    os.writeFloat(1, this.value);
    os.writeInt64(2, this.count);
};
LogStat.StatValue.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LogStat.StatValue.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LogStat.StatValue.prototype.toObject = function() { 
    return {
        "policy" : this.policy,
        "value" : this.value,
        "count" : this.count
    };
};
LogStat.StatValue.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("policy") && (this.policy = json.policy);
    json.hasOwnProperty("value") && (this.value = json.value);
    json.hasOwnProperty("count") && (this.count = json.count);
};
LogStat.StatValue.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LogStat.StatValue.new = function () {
    return new LogStat.StatValue();
};
LogStat.StatValue.create = function (is) {
    return LogStat.StatValue._readFrom(is);
};

LogStat.StatContent = function() {
    this.keys = new TafStream.List(TafStream.String);
    this.values = new TafStream.List(LogStat.StatValue);
    this._classname = "LogStat.StatContent";
};
LogStat.StatContent._classname = "LogStat.StatContent";
LogStat.StatContent._write = function (os, tag, value) { os.writeStruct(tag, value); };
LogStat.StatContent._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LogStat.StatContent._readFrom = function (is) {
    var tmp = new LogStat.StatContent();
    tmp.keys = is.readList(0, true, TafStream.List(TafStream.String));
    tmp.values = is.readList(1, true, TafStream.List(LogStat.StatValue));
    return tmp;
};
LogStat.StatContent.prototype._writeTo = function (os) {
    os.writeList(0, this.keys);
    os.writeList(1, this.values);
};
LogStat.StatContent.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LogStat.StatContent.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LogStat.StatContent.prototype.toObject = function() { 
    return {
        "keys" : this.keys.toObject(),
        "values" : this.values.toObject()
    };
};
LogStat.StatContent.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("keys") && (this.keys.readFromObject(json.keys));
    json.hasOwnProperty("values") && (this.values.readFromObject(json.values));
};
LogStat.StatContent.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LogStat.StatContent.new = function () {
    return new LogStat.StatContent();
};
LogStat.StatContent.create = function (is) {
    return LogStat.StatContent._readFrom(is);
};

LogStat.StatOneLog = function() {
    this.logname = "";
    this.keys = new TafStream.List(TafStream.String);
    this.values = new TafStream.List(LogStat.StatValue);
    this._classname = "LogStat.StatOneLog";
};
LogStat.StatOneLog._classname = "LogStat.StatOneLog";
LogStat.StatOneLog._write = function (os, tag, value) { os.writeStruct(tag, value); };
LogStat.StatOneLog._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
LogStat.StatOneLog._readFrom = function (is) {
    var tmp = new LogStat.StatOneLog();
    tmp.logname = is.readString(0, true, "");
    tmp.keys = is.readList(1, true, TafStream.List(TafStream.String));
    tmp.values = is.readList(2, true, TafStream.List(LogStat.StatValue));
    return tmp;
};
LogStat.StatOneLog.prototype._writeTo = function (os) {
    os.writeString(0, this.logname);
    os.writeList(1, this.keys);
    os.writeList(2, this.values);
};
LogStat.StatOneLog.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
LogStat.StatOneLog.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
LogStat.StatOneLog.prototype.toObject = function() { 
    return {
        "logname" : this.logname,
        "keys" : this.keys.toObject(),
        "values" : this.values.toObject()
    };
};
LogStat.StatOneLog.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("logname") && (this.logname = json.logname);
    json.hasOwnProperty("keys") && (this.keys.readFromObject(json.keys));
    json.hasOwnProperty("values") && (this.values.readFromObject(json.values));
};
LogStat.StatOneLog.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
LogStat.StatOneLog.new = function () {
    return new LogStat.StatOneLog();
};
LogStat.StatOneLog.create = function (is) {
    return LogStat.StatOneLog._readFrom(is);
};


var __LogStat_PropertyPlushF$logstat$EN = function (log) {
    var os = new TafStream.JceOutputStream();
    os.writeStruct(1, log);
    return os.getBinBuffer();
};

var __LogStat_PropertyPlushF$logstat$DE = function (data) {
    try {
        var is = new TafStream.JceInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TafError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __LogStat_PropertyPlushF$logstat$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

LogStat.PropertyPlushFProxy.prototype.logstat = function (log) {
    return this._worker.taf_invoke("logstat", __LogStat_PropertyPlushF$logstat$EN(log), arguments[arguments.length - 1]).then(__LogStat_PropertyPlushF$logstat$DE, __LogStat_PropertyPlushF$logstat$ER);
};

var __LogStat_PropertyPlushF$mutillogstat$EN = function (logs) {
    var os = new TafStream.JceOutputStream();
    os.writeList(1, logs);
    return os.getBinBuffer();
};

var __LogStat_PropertyPlushF$mutillogstat$DE = function (data) {
    try {
        var is = new TafStream.JceInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0)
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TafError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __LogStat_PropertyPlushF$mutillogstat$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

LogStat.PropertyPlushFProxy.prototype.mutillogstat = function (logs) {
    return this._worker.taf_invoke("mutillogstat", __LogStat_PropertyPlushF$mutillogstat$EN(logs), arguments[arguments.length - 1]).then(__LogStat_PropertyPlushF$mutillogstat$DE, __LogStat_PropertyPlushF$mutillogstat$ER);
};



