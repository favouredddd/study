// **********************************************************************
// Parsed By TafParser(3.2.2.11), Generated By jce2node(20180620)
// TafParser Maintained By <WSRD> and jce2node Maintained By <superzheng>
// Generated from "Client.jce" by Client Mode
// **********************************************************************

"use strict";

var assert    = require("assert");
var TafStream = require('../../../../../taf-stream');
var TafError  = require("../../../../protal.js").error;

var MTT = MTT || {};
module.exports.MTT = MTT;

MTT.XXXProxyProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

MTT.XXXProxyProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

MTT.XXXProxyProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

MTT.XXXProxyProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

MTT.XXXProxyProxy.prototype.getVersion = function () {
    return this._worker.version;
};


MTT.A = function() {
    this.test = "";
    this.test2 = 0;
    this._classname = "MTT.A";
};
MTT.A._classname = "MTT.A";
MTT.A._write = function (os, tag, value) { os.writeStruct(tag, value); };
MTT.A._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
MTT.A._readFrom = function (is) {
    var tmp = new MTT.A();
    tmp.test = is.readString(0, true, "");
    tmp.test2 = is.readInt32(1, false, 0);
    return tmp;
};
MTT.A.prototype._writeTo = function (os) {
    os.writeString(0, this.test);
    os.writeInt32(1, this.test2);
};
MTT.A.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
MTT.A.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
MTT.A.prototype.toObject = function() {
    return {
        "test" : this.test,
        "test2" : this.test2
    };
};
MTT.A.prototype.readFromObject = function(json) {
    json.hasOwnProperty("test") && (this.test = json.test);
    json.hasOwnProperty("test2") && (this.test2 = json.test2);
};
MTT.A.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
MTT.A.new = function () {
    return new MTT.A();
};
MTT.A.create = function (is) {
    return MTT.A._readFrom(is);
};


var __MTT_XXXProxy$echo$IF = {
    "name" : "echo",
    "return" : "int32",
    "arguments" : [{
        "name" : "a",
        "class" : "MTT.A",
        "direction" : "in"
    }, {
        "name" : "b",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __MTT_XXXProxy$echo$IE = function (a) {
    var os = new TafStream.JceOutputStream();
    os.writeStruct(1, a);
    return os.getBinBuffer();
};

var __MTT_XXXProxy$echo$ID = function (data) {
    try {
        var is = new TafStream.JceInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "b" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TafError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __MTT_XXXProxy$echo$PE = function (a, iVersion) {
    var wup = new TafStream.UniAttribute();
    wup.wupVersion =iVersion;
    wup.writeStruct("a", a);
    return wup;
};

var __MTT_XXXProxy$echo$PD = function (data) {
    try {
        var wup = data.response.wup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : data.response.iRet,
                "arguments" : {
                    "b" : wup.readInt32("b")
                }
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TafError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __MTT_XXXProxy$echo$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

MTT.XXXProxyProxy.prototype.echo = function (a) {
    if (this._worker.version === TafStream.Wup.WUP_SIMPLE || this._worker.version === TafStream.Wup.WUP_COMPLEX) {
        return this._worker.wup_invoke("echo", __MTT_XXXProxy$echo$PE(a, this._worker.version), arguments[arguments.length - 1], __MTT_XXXProxy$echo$IF).then(__MTT_XXXProxy$echo$PD, __MTT_XXXProxy$echo$ER);
    } else {
        return this._worker.taf_invoke("echo", __MTT_XXXProxy$echo$IE(a), arguments[arguments.length - 1], __MTT_XXXProxy$echo$IF).then(__MTT_XXXProxy$echo$ID, __MTT_XXXProxy$echo$ER);
    }
};
MTT.XXXProxyProxy.echo = __MTT_XXXProxy$echo$IF;

var __MTT_XXXProxy$echo2$IF = {
    "name" : "echo2",
    "return" : "void",
    "arguments" : []
};

var __MTT_XXXProxy$echo2$IE = function () {
    var os = new TafStream.JceOutputStream();
    return os.getBinBuffer();
};

var __MTT_XXXProxy$echo2$ID = function (data) {
    try {
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TafError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __MTT_XXXProxy$echo2$PE = function () {
    var wup = new TafStream.UniAttribute();
    return wup;
};

var __MTT_XXXProxy$echo2$PD = function (data) {
    try {
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime
            }
        };
    } catch (e) {
        throw {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "error" : {
                    "code" : TafError.CLIENT.DECODE_ERROR,
                    "message" : e.message
                }
            }
        };
    }
};

var __MTT_XXXProxy$echo2$ER = function (data) {
    throw {
        "request" : data.request,
        "response" : {
            "costtime" : data.request.costtime,
            "error" : data.error
        }
    }
};

MTT.XXXProxyProxy.prototype.echo2 = function () {
    if (this._worker.version === TafStream.Wup.WUP_SIMPLE || this._worker.version === TafStream.Wup.WUP_COMPLEX) {
        return this._worker.wup_invoke("echo2", __MTT_XXXProxy$echo2$PE(), arguments[arguments.length - 1], __MTT_XXXProxy$echo2$IF).then(__MTT_XXXProxy$echo2$PD, __MTT_XXXProxy$echo2$ER);
    } else {
        return this._worker.taf_invoke("echo2", __MTT_XXXProxy$echo2$IE(), arguments[arguments.length - 1], __MTT_XXXProxy$echo2$IF).then(__MTT_XXXProxy$echo2$ID, __MTT_XXXProxy$echo2$ER);
    }
};
MTT.XXXProxyProxy.echo2 = __MTT_XXXProxy$echo2$IF;



