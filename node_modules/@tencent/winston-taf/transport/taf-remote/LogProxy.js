// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `/usr/local/app/NodejsUtilServer/uploads/1435031010019/in/Log.jce'
// **********************************************************************

var TafStream = require('@tencent/taf-stream');
var TafError  = require('@tencent/taf-rpc').error;

var taf = taf || {};
module.exports.taf = taf;

taf.LogProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
}

taf.LogProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
}

taf.LogProxy.prototype.getTimeout = function ( ) {
    return this._worker.timeout;
}


taf.LogInfo = function() {
    this.appname = "";
    this.servername = "";
    this.sFilename = "";
    this.sFormat = "";
    this.setdivision = "";
    this.bHasSufix = true;
    this.bHasAppNamePrefix = true;
    this.bHasSquareBracket = false;
    this.sConcatStr = "_";
    this.sSepar = "|";
    this.sLogType = "";
    this._classname = "taf.LogInfo";
};
taf.LogInfo._classname = "taf.LogInfo";

taf.LogInfo._write = function (os, tag, value) { os.writeStruct(tag, value); }
taf.LogInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
taf.LogInfo._readFrom = function (is) {
    var tmp = new taf.LogInfo();
    tmp.appname = is.readString(0, true, "");
    tmp.servername = is.readString(1, true, "");
    tmp.sFilename = is.readString(2, true, "");
    tmp.sFormat = is.readString(3, true, "");
    tmp.setdivision = is.readString(4, false, "");
    tmp.bHasSufix = is.readBoolean(5, false, true);
    tmp.bHasAppNamePrefix = is.readBoolean(6, false, true);
    tmp.bHasSquareBracket = is.readBoolean(7, false, false);
    tmp.sConcatStr = is.readString(8, false, "_");
    tmp.sSepar = is.readString(9, false, "|");
    tmp.sLogType = is.readString(10, false, "");
    return tmp;
};
taf.LogInfo.prototype._writeTo = function (os) {
    os.writeString(0, this.appname);
    os.writeString(1, this.servername);
    os.writeString(2, this.sFilename);
    os.writeString(3, this.sFormat);
    os.writeString(4, this.setdivision);
    os.writeBoolean(5, this.bHasSufix);
    os.writeBoolean(6, this.bHasAppNamePrefix);
    os.writeBoolean(7, this.bHasSquareBracket);
    os.writeString(8, this.sConcatStr);
    os.writeString(9, this.sSepar);
    os.writeString(10, this.sLogType);
};
taf.LogInfo.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
taf.LogInfo.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
taf.LogInfo.prototype.toObject = function() { 
    var tmp = {};

    tmp.appname = this.appname;
    tmp.servername = this.servername;
    tmp.sFilename = this.sFilename;
    tmp.sFormat = this.sFormat;
    tmp.setdivision = this.setdivision;
    tmp.bHasSufix = this.bHasSufix;
    tmp.bHasAppNamePrefix = this.bHasAppNamePrefix;
    tmp.bHasSquareBracket = this.bHasSquareBracket;
    tmp.sConcatStr = this.sConcatStr;
    tmp.sSepar = this.sSepar;
    tmp.sLogType = this.sLogType;
    
    return tmp;
}
taf.LogInfo.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("appname") || (this.appname = json.appname);
    !json.hasOwnProperty("servername") || (this.servername = json.servername);
    !json.hasOwnProperty("sFilename") || (this.sFilename = json.sFilename);
    !json.hasOwnProperty("sFormat") || (this.sFormat = json.sFormat);
    !json.hasOwnProperty("setdivision") || (this.setdivision = json.setdivision);
    !json.hasOwnProperty("bHasSufix") || (this.bHasSufix = json.bHasSufix);
    !json.hasOwnProperty("bHasAppNamePrefix") || (this.bHasAppNamePrefix = json.bHasAppNamePrefix);
    !json.hasOwnProperty("bHasSquareBracket") || (this.bHasSquareBracket = json.bHasSquareBracket);
    !json.hasOwnProperty("sConcatStr") || (this.sConcatStr = json.sConcatStr);
    !json.hasOwnProperty("sSepar") || (this.sSepar = json.sSepar);
    !json.hasOwnProperty("sLogType") || (this.sLogType = json.sLogType);
}
taf.LogInfo.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
taf.LogInfo.new = function () {
    return new taf.LogInfo();
}
taf.LogInfo.create = function (is) {
    return taf.LogInfo._readFrom(is);
}

taf.LogProxy.prototype.logger = function (app, server, file, format, buffer) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeString(1, app);
        os.writeString(2, server);
        os.writeString(3, file);
        os.writeString(4, format);
        os.writeList(5, buffer);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('logger', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

taf.LogProxy.prototype.loggerbyInfo = function (info, buffer) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, info);
        os.writeList(2, buffer);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('loggerbyInfo', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}



