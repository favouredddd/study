'use strict';

var util = require('util'),
	fs = require('fs'),
	path = require('path'),
	cluster = require('cluster');

var winston = require('winston');

var TafBase = require('../taf-base'), 
	TafRotateCore = require('./core'),
	TafRotateMaster = require('./master');

var TafRotate = exports.TafRotate = function (options) {
	var instance = TafBase.call(this, options);

	if (instance) {
		return instance;
	}

	this.options.maxFiles = options.maxFiles || 10;
	this.options.maxSize = options.maxSize || 10 * 1024 * 1024; //10m
	this.options.concatStr = options.concatStr || '_';

	if ('isWorker' in options) {
		this._isWorker = !!options.isWorker;
	} else {
		this._isWorker = cluster.isWorker;
	}
};

util.inherits(TafRotate, TafBase);

TafRotate.prototype.name = 'tafRotate';

TafRotate.prototype._checkfile = function(cb) {
	if (!this._isWorker) {
		TafRotateCore.rotate(this._dirname,
			this._basename,
			this._extname,
			this.filename,
			this.options.maxFiles,
			this.options.maxSize,
			this.options.concatStr,
			cb);
	} else {
		try {
			process.send({
				cmd : 'log:rotate',
				data : {
					filename : this.filename,
					interval : this.options.interval,
					maxFiles : this.options.maxFiles,
					maxSize : this.options.maxSize,
					concatStr : this.options.concatStr
				}
			});
		} catch(e) {}
		
		cb();
	}
};

TafRotate.Master = TafRotateMaster;

winston.transports.TafRotate = TafRotate;