// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.2.2.1 by WSRD Tencent.
// Generated from `/data/NodejsServer/NodejsDeployServer/jce/uploads/1481869613962/in/TafNodeTestServer.jce'
// **********************************************************************

var TafStream = require('@tencent/taf-stream');
var TafError  = require('@tencent/taf-rpc').error;

var TafNode = TafNode || {};
module.exports.TafNode = TafNode;

TafNode.TafNodeTestProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
}

TafNode.TafNodeTestProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
}

TafNode.TafNodeTestProxy.prototype.getTimeout = function ( ) {
    return this._worker.timeout;
}


TafNode.TafNodeTestReq = function() {
    this.ip = "";
    this.port = "";
    this.pid = "";
    this._classname = "TafNode.TafNodeTestReq";
};
TafNode.TafNodeTestReq._classname = "TafNode.TafNodeTestReq";

TafNode.TafNodeTestReq._write = function (os, tag, value) { os.writeStruct(tag, value); }
TafNode.TafNodeTestReq._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
TafNode.TafNodeTestReq._readFrom = function (is) {
    var tmp = new TafNode.TafNodeTestReq();
    tmp.ip = is.readString(0, false, "");
    tmp.port = is.readString(1, false, "");
    tmp.pid = is.readString(2, false, "");
    return tmp;
};
TafNode.TafNodeTestReq.prototype._writeTo = function (os) {
    os.writeString(0, this.ip);
    os.writeString(1, this.port);
    os.writeString(2, this.pid);
};
TafNode.TafNodeTestReq.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
TafNode.TafNodeTestReq.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
TafNode.TafNodeTestReq.prototype.toObject = function() { 
    var tmp = {};

    tmp.ip = this.ip;
    tmp.port = this.port;
    tmp.pid = this.pid;
    
    return tmp;
}
TafNode.TafNodeTestReq.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("ip") || (this.ip = json.ip);
    !json.hasOwnProperty("port") || (this.port = json.port);
    !json.hasOwnProperty("pid") || (this.pid = json.pid);
}
TafNode.TafNodeTestReq.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
TafNode.TafNodeTestReq.new = function () {
    return new TafNode.TafNodeTestReq();
}
TafNode.TafNodeTestReq.create = function (is) {
    return TafNode.TafNodeTestReq._readFrom(is);
}
TafNode.TafNodeTestRsp = function() {
    this.ip = "";
    this.port = "";
    this._classname = "TafNode.TafNodeTestRsp";
};
TafNode.TafNodeTestRsp._classname = "TafNode.TafNodeTestRsp";

TafNode.TafNodeTestRsp._write = function (os, tag, value) { os.writeStruct(tag, value); }
TafNode.TafNodeTestRsp._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
TafNode.TafNodeTestRsp._readFrom = function (is) {
    var tmp = new TafNode.TafNodeTestRsp();
    tmp.ip = is.readString(0, true, "");
    tmp.port = is.readString(1, true, "");
    return tmp;
};
TafNode.TafNodeTestRsp.prototype._writeTo = function (os) {
    os.writeString(0, this.ip);
    os.writeString(1, this.port);
};
TafNode.TafNodeTestRsp.prototype._equal = function (anItem) {
    assert(false, 'this structure not define key operation');
}
TafNode.TafNodeTestRsp.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
TafNode.TafNodeTestRsp.prototype.toObject = function() { 
    var tmp = {};

    tmp.ip = this.ip;
    tmp.port = this.port;
    
    return tmp;
}
TafNode.TafNodeTestRsp.prototype.readFromObject = function(json) { 
    !json.hasOwnProperty("ip") || (this.ip = json.ip);
    !json.hasOwnProperty("port") || (this.port = json.port);
}
TafNode.TafNodeTestRsp.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
TafNode.TafNodeTestRsp.new = function () {
    return new TafNode.TafNodeTestRsp();
}
TafNode.TafNodeTestRsp.create = function (is) {
    return TafNode.TafNodeTestRsp._readFrom(is);
}

TafNode.TafNodeTestProxy.prototype.getServerInfo = function (stReq) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, stReq);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.stRsp = is.readStruct(2, true, TafNode.TafNodeTestRsp);

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('getServerInfo', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}



