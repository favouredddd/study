// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.2.1.6 by WSRD Tencent.
// Generated from `./EndpointF.jce'
// **********************************************************************

var TafStream = require('@tencent/taf-stream');
var TafError  = require('@tencent/taf-rpc').error;
var _TAF_MODULE_A_ = require('./EndpointFJce.js');

var taf = taf || {};
module.exports.taf = taf;

taf.QueryFProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
}

taf.QueryFProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
}

taf.QueryFProxy.prototype.getTimeout = function ( ) {
    return this._worker.timeout;
}


taf.QueryFProxy.prototype.findObjectById = function (id) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeString(1, id);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readList(0, true, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('findObjectById', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

taf.QueryFProxy.prototype.findObjectById4All = function (id) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeString(1, id);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.activeEp = is.readList(2, true, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
            response.arguments.inactiveEp = is.readList(3, true, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('findObjectById4All', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

taf.QueryFProxy.prototype.findObjectById4Any = function (id) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeString(1, id);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.activeEp = is.readList(2, true, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
            response.arguments.inactiveEp = is.readList(3, true, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('findObjectById4Any', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

taf.QueryFProxy.prototype.findObjectByIdInSameGroup = function (id) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeString(1, id);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.activeEp = is.readList(2, true, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
            response.arguments.inactiveEp = is.readList(3, true, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('findObjectByIdInSameGroup', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

taf.QueryFProxy.prototype.findObjectByIdInSameSet = function (id, setId) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeString(1, id);
        os.writeString(2, setId);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.activeEp = is.readList(3, true, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
            response.arguments.inactiveEp = is.readList(4, true, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('findObjectByIdInSameSet', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

taf.QueryFProxy.prototype.findObjectByIdInSameStation = function (id, sStation) {
    var _encode = function () { 
        var os = new TafStream.JceOutputStream();
        os.writeString(1, id);
        os.writeString(2, sStation);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        try {
            var response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.activeEp = is.readList(3, true, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));
            response.arguments.inactiveEp = is.readList(4, true, TafStream.List(_TAF_MODULE_A_.taf.EndpointF));

            return {request:data.request, response:response};
        } catch (e) {
            var response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('findObjectByIdInSameStation', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}



