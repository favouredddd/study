// **********************************************************************
// Parsed By TafParser(3.2.2.11), Generated By jce2node(20180606)
// TafParser Maintained By <WSRD> and jce2node Maintained By <superzheng>
// Generated from "XXXProxy.jce" by Server Mode
// **********************************************************************

"use strict";

var assert    = require("assert");
var TafStream = require("@tencent/taf-stream");
var TafError  = require("@tencent/taf-rpc").error;

var MTT = MTT || {};
module.exports.MTT = MTT;

MTT.A = function() {
    this.test = "";
    this.test2 = 0;
    this._classname = "MTT.A";
};
MTT.A._classname = "MTT.A";
MTT.A._write = function (os, tag, value) { os.writeStruct(tag, value); };
MTT.A._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
MTT.A._readFrom = function (is) {
    var tmp = new MTT.A();
    tmp.test = is.readString(0, false, "");
    tmp.test2 = is.readInt32(1, false, 0);
    return tmp;
};
MTT.A.prototype._writeTo = function (os) {
    os.writeString(0, this.test);
    os.writeInt32(1, this.test2);
};
MTT.A.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
MTT.A.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
MTT.A.prototype.toObject = function() { 
    return {
        "test" : this.test,
        "test2" : this.test2
    };
};
MTT.A.prototype.readFromObject = function(json) { 
    json.hasOwnProperty("test") && (this.test = json.test);
    json.hasOwnProperty("test2") && (this.test2 = json.test2);
};
MTT.A.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
MTT.A.new = function () {
    return new MTT.A();
};
MTT.A.create = function (is) {
    return MTT.A._readFrom(is);
};


MTT.XXXProxyImp = function () { 
    this._name   = undefined;
    this._worker = undefined;
};

MTT.XXXProxyImp.prototype.initialize = function () {};

MTT.XXXProxyImp.prototype.onDispatch = function (current, funcName, binBuffer) { 
    if ("__" + funcName in this) {
        return this["__" + funcName](current, binBuffer);
    } else {
        return TafError.SERVER.FUNC_NOT_FOUND;
    }
};

var __MTT_XXXProxy$taf_ping$RE = function (_ret) {
    if (this.getRequestVersion() === TafStream.Wup.WUP_SIMPLE || this.getRequestVersion() === TafStream.Wup.WUP_COMPLEX) {
        var wup = new TafStream.UniAttribute();
        wup.wupVersion = this.getRequestVersion();
        wup.writeInt32("", _ret);

        this.doResponse(wup.encode());
    } else {
        var os = new TafStream.JceOutputStream();
        os.writeInt32(0, _ret);

        this.doResponse(os.getBinBuffer());
    }
};

MTT.XXXProxyImp.prototype.__taf_ping = function (current) {
    __MTT_XXXProxy$taf_ping$RE.call(current, 0);

    return TafError.SUCCESS;
};

MTT.XXXProxyImp.prototype.echo = function () {
    assert.fail("echo function not implemented");
};

var __MTT_XXXProxy$echo$RE = function (_ret, b) {
    if (this.getRequestVersion() === TafStream.Wup.WUP_SIMPLE || this.getRequestVersion() === TafStream.Wup.WUP_COMPLEX) {
        var wup = new TafStream.UniAttribute();
        wup.wupVersion = this.getRequestVersion();
        wup.writeInt32("", _ret);
        wup.writeInt32("b", b);

        this.doResponse(wup.encode());
    } else {
        var os = new TafStream.JceOutputStream();
        os.writeInt32(0, _ret);
        os.writeInt32(2, b);

        this.doResponse(os.getBinBuffer());
    }
};

MTT.XXXProxyImp.prototype.__echo = function (current, binBuffer) {
    var a = null;
    var b = null;

    if (current.getRequestVersion() === TafStream.Wup.WUP_SIMPLE || current.getRequestVersion() === TafStream.Wup.WUP_COMPLEX) {
        var wup = new TafStream.UniAttribute();
        wup.wupVersion = current.getRequestVersion();
        wup.decode(binBuffer);
        a = wup.readStruct("a", MTT.A);
        b = wup.readInt32("b", 0);
    } else {
        var is = new TafStream.JceInputStream(binBuffer);
        a = is.readStruct(1, true, MTT.A);
        b = is.readInt32(2, false, 0);
    }

    current.sendResponse = __MTT_XXXProxy$echo$RE;

    this.echo(current, a, b);

    return TafError.SUCCESS;
};





