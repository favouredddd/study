var registryTaf, EndpointTaf, tafRpc;
var tafInstance = undefined;

var client = function (){
};

client.prototype._locator   = "";
client.prototype._proxy     = undefined;
client.prototype.New=function(){
    var instance=new client();
    // 对外暴露Endpoint对象， 便于使用Endpoint对象（EndpointTaf.Endpoint）
    instance.__defineGetter__("EndpointTaf", function () {
        if(EndpointTaf)
        {
            return EndpointTaf;
        }
        else
        {
            return require('./EndpointFJce.js').taf;
        }
    });
    return instance;
}

client.prototype.setLocator = function (sLocator) {
    this._locator = sLocator;
};

// 重新设置locator，需要重新初始化
client.prototype.resetLocator = function(sLocator){
    this._locator = sLocator;
    if(!tafRpc)
    {
        tafRpc = require("@tencent/taf-rpc");
        registryTaf = require("./QueryFProxy.js").taf;
        EndpointTaf = require('./EndpointFJce.js').taf;
    }
    tafInstance = tafRpc.Communicator.New();
    this._proxy = undefined;
};

client.prototype.initialize = function(){
    if(!tafRpc)
    {
        tafRpc = require("@tencent/taf-rpc");
        registryTaf = require("./QueryFProxy.js").taf;
        EndpointTaf = require('./EndpointFJce.js').taf;
    }
    tafInstance = tafRpc.Communicator.New();
    this._proxy = tafInstance.stringToProxy(registryTaf.QueryFProxy, this._locator);
};

/**
 * 返回所有该对象的活动endpoint列表
 * @param id 对象名称
 * @returns {*}
 */
client.prototype.findObjectById = function (id) {
    if (!this._proxy) {
        this.initialize();
    }

    return this._proxy.findObjectById(id);
};

/**
 * 根据id获取所有对象,包括活动和非活动对象
 * @param id 对象名称
 * @returns {*}
 */
client.prototype.findObjectById4Any = function (id) {
    if (!this._proxy) {
        this.initialize();
    }

    return this._proxy.findObjectById4Any(id);
};

/**
 * 根据id获取所有对象,包括活动和非活动对象
 * @param id 对象名称
 * @returns {*}
 */
client.prototype.findObjectById4All = function (id) {
    if (!this._proxy) {
        this.initialize();
    }

    return this._proxy.findObjectById4All(id);
};

/**
 * 根据id获取对象同组endpoint列表
 * @param id 对象名称
 * @returns {*}
 */
client.prototype.findObjectByIdInSameGroup = function (id) {
    if (!this._proxy) {
        this.initialize();
    }

    return this._proxy.findObjectByIdInSameGroup(id);
};

/**
 * 根据id获取对象指定归属地的endpoint列表
 * @param id 对象名称
 * @param sStation 归属地
 * @returns {*}
 */
client.prototype.findObjectByIdInSameStation = function (id, sStation) {
    if (!this._proxy) {
        this.initialize();
    }

    return this._proxy.findObjectByIdInSameStation(id, sStation);
};

/**
 * 根据id获取对象同组endpoint列表
 * @param id 对象名称
 * @param setId set全称,格式为name.area.group
 * @returns {*}
 */
client.prototype.findObjectByIdInSameSet = function (id, setId) {
    if (!this._proxy) {
        this.initialize();
    }

    return this._proxy.findObjectByIdInSameSet(id, setId);
};

var instance=client.prototype.New();

module.exports = instance;
