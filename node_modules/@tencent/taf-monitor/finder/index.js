'use strict';

var util = require('util'),
	assert = require('assert');

var TafConfigure = require('@tencent/taf-config-parser');

var ConfigServerSection;

var interfaceList = {}, initialized = false;

var getHash = function() {
	return Array.prototype.slice.apply(arguments).join('.');
};

var parseServantName = function(servant) {
	if (typeof servant === 'string') {
		servant = servant.split('.');
	} else {
		return null;
	}

	if (servant.length >= 3) {
		return {
			moduleName : servant.slice(0, 2).join('.'),
			interfaceName : servant.slice(2, servant.length).join('.')
		};
	} else {
		return null;
	}
};

var hashAddress = function() {
	Object.getOwnPropertyNames(ConfigServerSection).filter(function(name) {
		return typeof ConfigServerSection[name] === 'object';
	}).forEach(function(name) {
		var ip = /-h\s+([^\s]+)/.exec(ConfigServerSection[name].endpoint),
			port = /-p\s+([^\s]+)/.exec(ConfigServerSection[name].endpoint),
			servant = parseServantName(ConfigServerSection[name].servant);

		if (ip && ip[1] && port && port[1] && servant) {
			interfaceList[getHash(ip[1], port[1])] = {
				ip : ip[1],
				port : port[1],
				moduleName : servant.moduleName,
				interfaceName : servant.interfaceName
			};
		}
	});
};

var init = function(obj) {
	var TafConfig;

	obj = obj || process.env.TAF_CONFIG;

	assert(obj, 'TAF_CONFIG is not in env and init argument is neither an Object nor a String.');

	initialized = true;

	if (obj) {
		if (typeof obj === 'string') {
			TafConfig = new TafConfigure();
			TafConfig.parseFile(obj);
			obj = TafConfig.json;
		}

		if (typeof obj === 'object') {
			ConfigServerSection = obj.taf.application.server;
			hashAddress();
			return;
		}
	}
};

exports.init = init;

exports.find = function(ip, port) {
	var interfaceObj;

	if (!initialized) {
		init();
	}

	interfaceObj = interfaceList[getHash(ip, port)];

	if (interfaceObj) {
		return interfaceObj;
	} else {
		return {
			ip : ip,
			port : port,
			moduleName : util.format('%s.%s', ConfigServerSection.app, ConfigServerSection.server),
			interfaceName : 'not_taf_client'
		};
	}
};