var Endpoint = function (sHost, iPort) {
    this.sProtocol  = "";
    this.sHost      = sHost?sHost:"";
    this.iPort      = iPort?iPort: 0;
    this.iTimeout   = 0;
    this.iAuthType  = 0;
};

// 输出Endpoint信息
Endpoint.prototype.toString = function () {
    return (this.sProtocol + " -h " + this.sHost + " -p " + this.iPort + " -t " + this.iTimeout).replace(/^[\s\t ]+|[\s\t ]+$/g, '');
};


// 拷贝Endpoint实例
Endpoint.prototype.copy = function () {
    var temp = new Endpoint();
    temp.sProtocol  = this.sProtocol;
    temp.sHost      = this.sHost;
    temp.iPort      = this.iPort;
    temp.iTimeout   = this.iTimeout;
    temp.iAuthType   = this.iAuthType;

    return temp;
};

// 从字符串中解析出Endpoint信息
Endpoint.parse = function(desc) {
    var endpoint = new Endpoint();

    var items = desc.split(" ");
    var protocol = items[0].toLowerCase();
    if (protocol != "http" && protocol != "tcp" && protocol != "udp") {
        return undefined;
    }
    endpoint.sProtocol = protocol;

    for (var ii = 1; ii < items.length; ii++) {
        if (items[ii] === "-h") { endpoint.sHost     = items[++ii]; continue; }
        if (items[ii] === "-p") { endpoint.iPort     = parseInt(items[++ii]); continue; }
        if (items[ii] === "-t") { endpoint.iTimeout  = parseInt(items[++ii]); continue; }
        if (items[ii] === "-e") { endpoint.iAuthType = items[++ii]?parseInt(items[ii]):0; continue;}
    }

    return endpoint;
};

module.exports  = Endpoint;
